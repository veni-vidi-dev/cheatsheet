/*
 * This file is generated by jOOQ.
 */
package com.spaceship.crm.jooq.tables;


import com.spaceship.crm.jooq.Indexes;
import com.spaceship.crm.jooq.Keys;
import com.spaceship.crm.jooq.Public;
import com.spaceship.crm.jooq.tables.records.DreamRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dream extends TableImpl<DreamRecord> {

    private static final long serialVersionUID = 370296894;

    /**
     * The reference instance of <code>public.dream</code>
     */
    public static final Dream DREAM = new Dream();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DreamRecord> getRecordType() {
        return DreamRecord.class;
    }

    /**
     * The column <code>public.dream.id</code>.
     */
    public final TableField<DreamRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.dream.description</code>.
     */
    public final TableField<DreamRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.dream.user_id</code>.
     */
    public final TableField<DreamRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.dream</code> table reference
     */
    public Dream() {
        this(DSL.name("dream"), null);
    }

    /**
     * Create an aliased <code>public.dream</code> table reference
     */
    public Dream(String alias) {
        this(DSL.name(alias), DREAM);
    }

    /**
     * Create an aliased <code>public.dream</code> table reference
     */
    public Dream(Name alias) {
        this(alias, DREAM);
    }

    private Dream(Name alias, Table<DreamRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dream(Name alias, Table<DreamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dream(Table<O> child, ForeignKey<O, DreamRecord> key) {
        super(child, key, DREAM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DREAM_PKEY);
    }

    @Override
    public UniqueKey<DreamRecord> getPrimaryKey() {
        return Keys.DREAM_PKEY;
    }

    @Override
    public List<UniqueKey<DreamRecord>> getKeys() {
        return Arrays.<UniqueKey<DreamRecord>>asList(Keys.DREAM_PKEY);
    }

    @Override
    public List<ForeignKey<DreamRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DreamRecord, ?>>asList(Keys.DREAM__FK30303R9AFE6J46R1D81DP4RBY);
    }

    public Users users() {
        return new Users(this, Keys.DREAM__FK30303R9AFE6J46R1D81DP4RBY);
    }

    @Override
    public Dream as(String alias) {
        return new Dream(DSL.name(alias), this);
    }

    @Override
    public Dream as(Name alias) {
        return new Dream(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dream rename(String name) {
        return new Dream(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dream rename(Name name) {
        return new Dream(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
